# .travis.yml

language: java
jdk:
  - openjdk17 # Especifica el JDK 17, que es el que usa tu proyecto

services:
  - docker # Habilita el servicio Docker en el entorno de Travis CI

cache:
  directories:
    - $HOME/.m2 # Cacha las dependencias de Maven para acelerar builds futuros
    - $HOME/.docker # Cacha imágenes de Docker (opcional, pero útil)

env:
  global:
    - DOCKER_COMPOSE_VERSION=1.29.2 # Versión de Docker Compose a usar (puedes ajustar)

before_install:
  # Instalar una versión específica de Docker Compose (Travis CI ya trae Docker instalado)
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m) -o docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker-compose --version # Verifica que se haya instalado la versión correcta

install:
  # Construye los JARs de tus aplicaciones Spring Boot con Maven
  # Usa -DskipTests para construir solo los JARs sin ejecutar los tests de unidad en esta fase,
  # ya que los tests se ejecutarán dentro de los contenedores Docker en la fase 'script'.
  - cd client && mvn clean install -DskipTests=true && cd ..
  - cd clientTwo && mvn clean install -DskipTests=true && cd ..

script:
  # Construye las imágenes Docker y levanta los servicios con Docker Compose
  - docker-compose build
  - docker-compose up -d # Levanta los servicios en segundo plano

  # Esperar a que los servicios estén listos (crucial para tests de integración)
  # Esto es un script básico; para algo más robusto, considera healthchecks en docker-compose.yml
  - echo "Waiting for services to be ready..."
  - sleep 30 # Ajusta este tiempo según lo que tarden tus apps en iniciar

  # Ejecutar los tests de integración si los tienes.
  # Para este ejemplo, haremos una simple petición curl para verificar la comunicación.
  # Asume que tienes un test de integración o un endpoint de salud en 'client'.
  # Usaremos el puerto interno 8082 ya que dentro de Travis CI, Docker Compose
  # ya maneja la red entre los servicios.
  - curl -X POST -H "Content-Type: text/plain" -d "Mensaje desde Travis CI" http://localhost:8082/sender/send
  - curl http://localhost:8082/sender/health # Si tienes un endpoint de salud

  # Opcional: Ejecuta los tests de Spring Boot usando Maven,
  # pero apuntando a los servicios Docker que están corriendo.
  # Esto requeriría que tus tests de integración usen RestTemplate y apunten a los puertos internos
  # o a localhost con los puertos mapeados si los quieres testear desde afuera.
  # Otra forma es crear un módulo de tests de integración separado que se ejecute después del docker-compose up
  # - mvn test # Si tienes tests de integración que dependan de los servicios levantados
after_script:
  - docker-compose down # Baja los servicios Docker después de la ejecución

# Opcional: Despliegue (ej. a Docker Hub)
# deploy:
#   provider: script
#   script: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD && docker push tu_repo/client && docker push tu_repo/clienttwo
#   on:
#     branch: main # Solo despliega cuando se hace push a la rama 'main'
#     # También puedes añadir un 'condition' para que solo despliegue si los tests pasan, etc.
